package com.example.learn.oop

import java.sql.{ Date=>_, Array=>_}   //屏蔽sql中的Date、Array
/**
 * @descr 面向对象编程
 * @date 2021/6/4 17:00
 */
object OOProgrammingExample001 {

  // Scala中有伴生类和伴生对象之分。
  // class修饰的类就是普通的伴生类，在使用时需要new对象。而Object用于修饰伴随着这个类所产生的一个单例对象，用于模仿java中的静态语法。object中的方法和属性都可以通过类名直接访问，类似于静态语法。


  // 面向对象进阶
  // 继承
  // 跟Java一样，使用extends关键字表示类的继承关系。

  // 抽象
  // 抽象方法：不完整的方法，可以不使用abstract关键字
  // 若类中含有抽象方法/抽象属性，则此类必须为抽象类，用abstract关键字进行声明。
  //​抽象类中可以有完整的方法，若子类重写父类的完整方法，必须要用override关键字进行修饰。子类实现父类的抽象方法，可以使用或者不用override关键字。
  // 抽象属性：没有初始化的属性。
  // 子类重写父类的完整属性必须是val的，不能重写var的属性，实现抽象属性则没有要求。重写抽象属性，相当于普通属性的声明，这个属性可以是val和var的，可以使用或者不用override关键字。但是重写普通属性，只能是val的，必须要用override关键字进行修饰。


  // 特质
  // scala中没有接口。但是增加了特质（trait）。scala可以将多个类中相同的特征，从类中剥离出来，形成特殊的语法"特质"。特质中可以声明抽象方法，也可以声明普通方法。特质的使用需要混入到类中。特质的一个重要的功能：可以进行功能的扩展。
  // 特质也可以看做抽象类，继承其他的类，并用with混入其他的特质。特质又可以使用extends，又可以使用with。




}
